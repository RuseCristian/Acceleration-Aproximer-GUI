from kivy.properties import NumericProperty
from kivy.uix.boxlayout import BoxLayout
from kivymd.uix.boxlayout import MDBoxLayout
from kivy.lang.builder import Builder
from kivy.uix.screenmanager import Screen
from kivymd.app import MDApp
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDFlatButton
from kivymd.uix.dialog import MDDialog
from kivymd.uix.floatlayout import MDFloatLayout
from kivymd.uix.tab import MDTabsBase


class Tab(MDFloatLayout, MDTabsBase):
    '''Class implementing content for a tab.'''


class ContentNavigationDrawer(MDBoxLayout):
    pass


class CarScreen(Screen):
    pass


class EngineScreen(Screen):
    pass


class DrivetrainScreen(Screen):
    pass


class TireScreen(Screen):
    pass


class AeroScreen(Screen):
    pass


class ResultsScreen(Screen):
    pass


class MDTextFieldRound:
    pass


class DynamicFieldsLayout(BoxLayout):
    num_fields = NumericProperty(2)

    def add_field(self):
        if self.num_fields < 10:  # limit to 10 fields
            new_field = MDTextFieldRound(hint_text=f'Field {self.num_fields + 1}')
            self.add_widget(new_field)
            self.num_fields += 1

    def remove_field(self):
        if self.num_fields > 2:  # keep at least 2 fields
            self.remove_widget(self.children[-1])
            self.num_fields -= 1


class AccelerationApproximator(MDApp):

    def build(self):
        self.dialog = None
        self.theme_cls.primary_palette = "BlueGray"
        self.theme_cls.theme_style = "Light"
        return Builder.load_file('app.kv')

    def weight_shifting_turned_off(self, switchObject, switchValue):

        if switchValue:
            self.root.ids.wheelbase_field.visible = True
            self.root.ids.track_width_field.visible = True
            self.root.ids.roll_center_height_field.visible = True
            self.root.ids.roll_stiffness_field.visible = True

        else:
            self.root.ids.wheelbase_field.visible = False
            self.root.ids.track_width_field.visible = False
            self.root.ids.roll_center_height_field.visible = False
            self.root.ids.roll_stiffness_field.visible = False

    def show_weight_shifting_extra_information(self):
        if not self.dialog:
            self.dialog = MDDialog(
                text="When a car accelerates, its body wants to stay put due to its inertia. This causes the weight of the car to shift towards the rear, "
                     "which helps increase the grip on the rear wheels. This simulates said phenomena, but needs some hard to get information, thus it is optional.",
                buttons=[
                    MDFlatButton(
                        text="Continue",
                        theme_text_color="Primary",
                        text_color=self.theme_cls.primary_color,
                        on_press=lambda x: self.close_dialog()
                    )
                ],
            )
        self.dialog.open()

    def downforce_turned_off(self, switchObject, switchValue):
        if switchValue:
            self.root.ids.negative_lift_coefficient.visible = True
            self.root.ids.downforce_total_area.visible = True
            self.root.ids.downforce_distribution.visible = True
        else:
            self.root.ids.negative_lift_coefficient.visible = False
            self.root.ids.downforce_total_area.visible = False
            self.root.ids.downforce_distribution.visible = False

    def show_downforce_extra_information(self):
        if not self.dialog:
            self.dialog = MDDialog(
                text="Downforce is a downward force that is generated by the aerodynamic design of a car. This force pushes the car onto the ground, increasing the "
                     "friction between the tires and the road surface, which increases the car's grip. Without downforce, "
                     "the car's grip limit would be significantly lower, and it would be more challenging to accelerate",
                buttons=[
                    MDFlatButton(
                        text="Continue",
                        theme_text_color="Primary",
                        text_color=self.theme_cls.primary_color,
                        on_press=lambda x: self.close_dialog()
                    )
                ],
            )
        self.dialog.open()

    def close_dialog(self):
        self.dialog.dismiss()


AccelerationApproximator().run()
